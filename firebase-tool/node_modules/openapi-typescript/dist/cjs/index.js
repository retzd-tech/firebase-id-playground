"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WARNING_MESSAGE = void 0;
const path_1 = __importDefault(require("path"));
const color = __importStar(require("kleur/colors"));
const prettier_1 = __importDefault(require("prettier"));
const parser_typescript_js_1 = __importDefault(require("prettier/parser-typescript.js"));
const url_1 = require("url");
const load_js_1 = __importStar(require("./load.js"));
const utils_js_1 = require("./utils.js");
const index_js_1 = require("./transform/index.js");
__exportStar(require("./types.js"), exports);
exports.WARNING_MESSAGE = `/**
* This file was auto-generated by openapi-typescript.
* Do not make direct changes to the file.
*/


`;
async function openapiTS(schema, options = {}) {
    const ctx = {
        additionalProperties: options.additionalProperties || false,
        auth: options.auth,
        defaultNonNullable: options.defaultNonNullable || false,
        formatter: options && typeof options.formatter === "function" ? options.formatter : undefined,
        immutableTypes: options.immutableTypes || false,
        rawSchema: options.rawSchema || false,
        version: options.version || 3,
    };
    let rootSchema = {};
    let external = {};
    const allSchemas = {};
    if (typeof schema === "string") {
        const schemaURL = (0, load_js_1.resolveSchema)(schema);
        if (options.silent === false)
            console.log(color.yellow(`üî≠ Loading spec from ${color.bold(schemaURL.href)}‚Ä¶`));
        await (0, load_js_1.default)(schemaURL, {
            ...ctx,
            schemas: allSchemas,
            rootURL: schemaURL,
            httpHeaders: options.httpHeaders,
            httpMethod: options.httpMethod,
        });
        for (const k of Object.keys(allSchemas)) {
            if (k === schemaURL.href) {
                rootSchema = allSchemas[k];
            }
            else {
                external[k] = allSchemas[k];
            }
        }
    }
    else {
        await (0, load_js_1.default)(schema, {
            ...ctx,
            schemas: allSchemas,
            rootURL: new url_1.URL(load_js_1.VIRTUAL_JSON_URL),
            httpHeaders: options.httpHeaders,
            httpMethod: options.httpMethod,
        });
        for (const k of Object.keys(allSchemas)) {
            if (k === load_js_1.VIRTUAL_JSON_URL) {
                rootSchema = allSchemas[k];
            }
            else {
                external[k] = allSchemas[k];
            }
        }
    }
    let output = exports.WARNING_MESSAGE;
    if (!(options === null || options === void 0 ? void 0 : options.version) && !ctx.rawSchema)
        ctx.version = (0, utils_js_1.swaggerVersion)(rootSchema);
    const rootTypes = (0, index_js_1.transformAll)(rootSchema, { ...ctx });
    for (const k of Object.keys(rootTypes)) {
        if (typeof rootTypes[k] === "string") {
            output += `export interface ${k} {\n  ${rootTypes[k]}\n}\n\n`;
        }
    }
    output += `export interface external {\n`;
    const externalKeys = Object.keys(external);
    externalKeys.sort((a, b) => a.localeCompare(b, "en", { numeric: true }));
    for (const subschemaURL of externalKeys) {
        output += `  "${subschemaURL}": {\n`;
        const subschemaTypes = (0, index_js_1.transformAll)(external[subschemaURL], { ...ctx, namespace: subschemaURL });
        for (const k of Object.keys(subschemaTypes)) {
            output += `    "${k}": {\n      ${subschemaTypes[k]}\n    }\n`;
        }
        output += `  }\n`;
    }
    output += `}\n\n`;
    let prettierOptions = {
        parser: "typescript",
        plugins: [parser_typescript_js_1.default],
    };
    if (options && options.prettierConfig) {
        try {
            const userOptions = await prettier_1.default.resolveConfig(path_1.default.resolve(process.cwd(), options.prettierConfig));
            prettierOptions = {
                ...(userOptions || {}),
                ...prettierOptions,
                plugins: [...prettierOptions.plugins, ...((userOptions && userOptions.plugins) || [])],
            };
        }
        catch (err) {
            console.error(`‚ùå ${err}`);
        }
    }
    return prettier_1.default.format(output, prettierOptions);
}
exports.default = openapiTS;
//# sourceMappingURL=index.js.map